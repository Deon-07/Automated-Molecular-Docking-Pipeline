#!/bin/bash

# --- Automated Docking Script ---
# Author: Dip Kumar Ghosh (Deon-07)
# GitHub: https://github.com/Deon-07/automated-docking
# 
# This script prepares a PDB receptor and docks multiple ligands (SDF/MOL2)
# against it using Open Babel and AutoDock Vina. It saves a PDB complex for
# each docking pose into a dedicated folder for each ligand.

# --- Configuration ---
# Exit immediately if a command exits with a non-zero status.
set -e

# --- USER CONFIGURATION ---
# Modify these paths according to your system setup

# Receptor PDB file (update this path)
RECEPTOR_PDB_FILE="/path/to/your/receptor.pdb"

# Directory containing ligand files (SDF/MOL2 format)
LIGAND_DIR="/path/to/your/ligands"

# AutoDock Vina executable paths (update these paths)
VINA_EXECUTABLE="/path/to/vina"
VINA_SPLIT_EXECUTABLE="/path/to/vina_split"

# Docking search space coordinates - UPDATE THESE FOR YOUR RECEPTOR
CENTER_X="37.7494560252"
CENTER_Y="10.5055397622"
CENTER_Z="48.4313435631"
SIZE_X="40.279181568"
SIZE_Y="27.2915204756"
SIZE_Z="29.3130756759"

# CPU usage limit
CPU_THREADS="8"

# --- DYNAMIC DIRECTORY SETUP ---
# Get the absolute path of the directory where the script is being run
SCRIPT_RUN_DIR=$(pwd)
# Create a unique directory name using the current date and time
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
MAIN_OUTPUT_DIR="${SCRIPT_RUN_DIR}/output_${TIMESTAMP}"

# Define all other output paths to be inside the main output directory
PREPARED_RECEPTOR_FILE="${MAIN_OUTPUT_DIR}/prepared_receptor.pdbqt"
PREPARED_LIGAND_DIR="${MAIN_OUTPUT_DIR}/prepared_ligands"
VINA_OUTPUT_DIR="${MAIN_OUTPUT_DIR}/vina_outputs"
MAIN_LOG_FILE="${MAIN_OUTPUT_DIR}/docking_run.log"
CONFIG_FILE="${MAIN_OUTPUT_DIR}/vina_config.txt"

# --- LOGGING SETUP ---
# Log message function: prints to console and appends to the main log file.
log_message() {
    echo "$1" | tee -a "$MAIN_LOG_FILE"
}

# --- SCRIPT START ---
# Create the main output directory
mkdir -p "$MAIN_OUTPUT_DIR"
# Clear previous log file content and record start time
echo "Automated Docking Script - Dip Kumar Ghosh (Deon-07)" > "$MAIN_LOG_FILE"
echo "Script started on $(date)" >> "$MAIN_LOG_FILE"
start_time=$(date +%s)

log_message "=== Automated Molecular Docking Pipeline ==="
log_message "Author: Dip Kumar Ghosh (GitHub: Deon-07)"
log_message "Repository: https://github.com/Deon-07/automated-docking"
log_message ""

log_message "Input Receptor PDB file: ${RECEPTOR_PDB_FILE}"
log_message "Ligand directory: ${LIGAND_DIR}"

# Create subdirectories for prepared ligands and Vina results
log_message "Creating output directory: ${MAIN_OUTPUT_DIR}"
mkdir -p "$PREPARED_LIGAND_DIR"
mkdir -p "$VINA_OUTPUT_DIR"

# --- Check for Tools and Input Files ---
if ! command -v obabel &> /dev/null; then
    log_message "ERROR: 'obabel' command not found. Please install Open Babel:"
    log_message "  Ubuntu/Debian: sudo apt-get install openbabel"
    log_message "  macOS: brew install open-babel"
    exit 1
fi
if [ ! -x "$VINA_EXECUTABLE" ]; then
    log_message "ERROR: Vina executable not found or not executable at: $VINA_EXECUTABLE"
    log_message "Please download AutoDock Vina and update the VINA_EXECUTABLE path in the script."
    exit 1
fi
if [ ! -x "$VINA_SPLIT_EXECUTABLE" ]; then
    log_message "ERROR: vina_split executable not found or not executable at: $VINA_SPLIT_EXECUTABLE"
    log_message "Please download AutoDock Vina and update the VINA_SPLIT_EXECUTABLE path in the script."
    exit 1
fi
if [ ! -f "$RECEPTOR_PDB_FILE" ]; then
    log_message "ERROR: Receptor PDB file not found at: $RECEPTOR_PDB_FILE"
    log_message "Please update the RECEPTOR_PDB_FILE path in the script configuration section."
    exit 1
fi
if [ ! -d "$LIGAND_DIR" ]; then
    log_message "ERROR: Ligand directory not found at: $LIGAND_DIR"
    log_message "Please update the LIGAND_DIR path in the script configuration section."
    exit 1
fi

# --- Receptor Preparation ---
log_message "--------------------------------------------------"
log_message "Preparing receptor..."
log_message "  -> Adding H, calculating charges, and converting to PDBQT..."
# The -xr flag makes the receptor rigid for docking.
obabel -ipdb "$RECEPTOR_PDB_FILE" -opdbqt -O "$PREPARED_RECEPTOR_FILE" -xr -h &>> "$MAIN_LOG_FILE"
if [ $? -ne 0 ]; then
    log_message "  -> ERROR: Failed to prepare receptor. Check $MAIN_LOG_FILE for details."
    exit 1
fi
log_message "  -> Receptor preparation successful: ${PREPARED_RECEPTOR_FILE}"

# --- Create Vina Configuration File ---
log_message "Generating Vina configuration file: $CONFIG_FILE"
cat > "$CONFIG_FILE" << EOL
# AutoDock Vina Configuration
# Generated by Automated Docking Script - Dip Kumar Ghosh (Deon-07)
receptor = $PREPARED_RECEPTOR_FILE
center_x = $CENTER_X
center_y = $CENTER_Y
center_z = $CENTER_Z
size_x = $SIZE_X
size_y = $SIZE_Y
size_z = $SIZE_Z
num_modes = 9
exhaustiveness = 14
cpu = $CPU_THREADS
EOL

# --- Ligand Preparation and Docking Loop ---
log_message "--------------------------------------------------"
log_message "Starting ligand preparation and docking process..."

# Count ligand files
ligand_files=("$LIGAND_DIR"/*.sdf "$LIGAND_DIR"/*.mol2)
ligand_count=0
for file in "${ligand_files[@]}"; do
    [ -e "$file" ] && ((ligand_count++))
done

log_message "Found $ligand_count ligand files to process"

# Loop through all SDF and MOL2 files in the specified directory
current_ligand=0
for ligand_file in "$LIGAND_DIR"/*.sdf "$LIGAND_DIR"/*.mol2; do
    # Check if any ligand files exist to avoid errors if a pattern matches no files
    [ -e "$ligand_file" ] || continue

    current_ligand=$((current_ligand + 1))
    extension="${ligand_file##*.}"
    ligand_name=$(basename -- "$ligand_file" ."$extension")

    log_message "--------------------------------------------------"
    log_message "Processing ligand $current_ligand/$ligand_count: $ligand_name (from .$extension file)"
    
    # Create a dedicated directory for this ligand's results
    ligand_result_dir="${VINA_OUTPUT_DIR}/${ligand_name}"
    mkdir -p "$ligand_result_dir"

    prepared_ligand_pdbqt="${PREPARED_LIGAND_DIR}/${ligand_name}.pdbqt"
    vina_out_file="${ligand_result_dir}/${ligand_name}_out.pdbqt"
    vina_log_file="${ligand_result_dir}/${ligand_name}_log.txt"

    # 1. Prepare Ligand
    log_message "  -> Preparing ligand (adding H, calculating charges) and converting to PDBQT..."
    obabel -i"$extension" "$ligand_file" -opdbqt -O "$prepared_ligand_pdbqt" -h &>> "$MAIN_LOG_FILE"
    if [ $? -ne 0 ]; then
        log_message "  -> ERROR: Failed to convert $ligand_name. Skipping. Check $MAIN_LOG_FILE for details."
        continue
    fi
    log_message "  -> Conversion successful: $prepared_ligand_pdbqt"

    # 2. Run Vina Docking
    log_message "  -> Running AutoDock Vina on $CPU_THREADS threads..."
    if ! "$VINA_EXECUTABLE" --config "$CONFIG_FILE" --ligand "$prepared_ligand_pdbqt" --out "$vina_out_file" --log "$vina_log_file" --cpu "$CPU_THREADS" 2>&1 | tee -a "$MAIN_LOG_FILE"; then
        log_message "  -> ERROR: Vina docking failed for $ligand_name. See output above for details."
        continue
    fi
    log_message "  -> Docking successful. Log file saved in $ligand_result_dir"

    # 3. Split poses and create PDB complexes
    log_message "  -> Splitting poses and creating PDB complex files..."
    poses_dir="${ligand_result_dir}/poses"
    mkdir -p "$poses_dir"
    
    # Run vina_split inside the ligand's result directory.
    (
      cd "$ligand_result_dir" || exit
      "$VINA_SPLIT_EXECUTABLE" --input "${ligand_name}_out.pdbqt" &>> "$MAIN_LOG_FILE"
    )

    # Loop through the split pose files to create complexes
    pose_count=0
    for pose_pdbqt_file in "${ligand_result_dir}"/*_ligand_*.pdbqt; do
        [ -e "$pose_pdbqt_file" ] || continue
        
        pose_count=$((pose_count + 1))
        complex_pdb_file="${poses_dir}/pose_${pose_count}_complex.pdb"

        # 1. Copy the original receptor PDB into the new complex file
        cat "$RECEPTOR_PDB_FILE" > "$complex_pdb_file"
        # Add a TER card to separate receptor from ligand
        echo "TER" >> "$complex_pdb_file"
        # 2. Convert the ligand pose from PDBQT to PDB and append it
        # This is the corrected, more reliable method.
        # It takes only the ATOM/HETATM lines and cuts them to standard PDB length.
        grep -E '^ATOM|^HETATM' "$pose_pdbqt_file" | cut -c-66 >> "$complex_pdb_file"
    done
    
    # 4. Clean up intermediate files
    rm "${ligand_result_dir}"/*_ligand_*.pdbqt 2>/dev/null || true
    rm "$vina_out_file" 2>/dev/null || true
    log_message "  -> ${pose_count} PDB complex files saved in ${poses_dir}"

done

# --- Summarize Best Results ---
log_message "--------------------------------------------------"
log_message "Summarizing top 5 docking results..."

# Create a temporary file to hold all best scores
temp_scores_file="${MAIN_OUTPUT_DIR}/all_best_scores.tmp"
touch "$temp_scores_file"

# Use find to locate all individual log files recursively and extract the best score (mode 1)
for log_file in $(find "${VINA_OUTPUT_DIR}" -type f -name "*_log.txt"); do
    if [ -f "$log_file" ];
    then
        ligand_name=$(basename "$(dirname "$log_file")")
        grep -- "   1 " "$log_file" | awk -v name="$ligand_name" '{print name, $2}' >> "$temp_scores_file"
    fi
done

# Sort the temporary file by the second column (the score) and get the top 5
if [ -s "$temp_scores_file" ]; then
    log_message "Top 5 Docking Results (by Binding Affinity):"
    
    sort -k2 -n "$temp_scores_file" | head -n 5 | while read -r ligand_name affinity; do
        log_message "  -> Ligand: ${ligand_name}    Affinity: ${affinity} kcal/mol"
    done
else
    log_message "No docking results found to summarize."
fi

# Clean up the temporary file
rm "$temp_scores_file"

# --- SCRIPT END ---
end_time=$(date +%s)
runtime=$((end_time - start_time))

log_message "--------------------------------------------------"
log_message "Docking process completed for all ligands."
log_message "All results saved in: ${MAIN_OUTPUT_DIR}"
log_message "Total runtime: $((runtime / 60)) minutes and $((runtime % 60)) seconds."
log_message ""
log_message "=== Script finished successfully ==="
log_message "For issues and contributions, visit: https://github.com/Deon-07/automated-docking"